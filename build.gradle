import java.util.concurrent.TimeUnit;
plugins {
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
	id 'war'
	
}

war {
	enabled = true
}
group = 'app'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	//for heroku war web app deployment
	implementation 'com.github.jsimone:webapp-runner:8.5.11.3'
	implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'//needed for tomcat to render jsp files to browser
	implementation group: 'javax.servlet', name: 'jstl', version: '1.2'
	providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
	providedCompile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.3'
//	providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version: '2.2.1-b03'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-core'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

// For heroku web war build

task stage() {
    dependsOn clean, war
}
war.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/server"
    from(configurations.runTimeClasspath) {
        include "webapp-runner*"
    }
}

stage.dependsOn(copyToLib)



// task warToJar() {
// 	println "\u001B[32m"+"converting WAR TO JAR"
// 	ext.process = new ProcessBuilder()
//             .directory(projectDir)
//             .command("jar", "-xvf", "build/libs/iVoteHub-0.0.1-SNAPSHOT.war")
//             .start();
	

// 	ext.process.waitFor(5,TimeUnit.SECONDS);
// 	ext.process.destroy();
// 	ext.process.waitFor(5,TimeUnit.SECONDS);
// 	ext.process.destroyForcibly();
// 	ext.process.waitFor();

	
// 	// ext.output = { //for access to external output if needed
// 	// 	return "\u001B[32m"+standardOutput.toString();
// 	// }
// 	timeout = Duration.ofMinutes(1)
// 	doLast { 
// 		println "\u001B[32m"+"warToJar done!"
// 	}
// }

// build.dependsOn warToJar